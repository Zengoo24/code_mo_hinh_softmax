import cv2
import mediapipe as mp
import numpy as np
import os
from PIL import Image
from ultralytics import YOLO
import joblib
from collections import defaultdict
import sys

# ==========================================================
# C·∫§U H√åNH V√Ä H·∫∞NG S·ªê
# ==========================================================
# üõë CH·ªàNH S·ª¨A C√ÅC ƒê∆Ø·ªúNG D·∫™N N√ÄY üõë
YOLO_MODEL_PATH = r"E:\PythonProject\data\New folder\best (1).pt"  # File YOLO ƒë√£ train
DATA_DIR = r"E:\PythonProject\data\New folder"  # Th∆∞ m·ª•c g·ªëc ch·ª©a ·∫£nh (on_wheel, off_wheel)
OUTPUT_FILE = "wheel_features.npz"  # File ƒë·∫ßu ra m·ªõi
# ----------------------------------

EPS = 1e-8
# ƒê√É C·∫¨P NH·∫¨T: K√≠ch th∆∞·ªõc ƒë·∫∑c tr∆∞ng m·ª•c ti√™u (2 tay, ho·∫∑c 1 tay + padding)
EXPECTED_FEATURES = 128
mp_hands = mp.solutions.hands


# ==========================================================
# C√ÅC H√ÄM X·ª¨ L√ù V√î LƒÇNG & TAY
# ==========================================================

def load_yolo_wheel_model(model_path):
    """T·∫£i m√¥ h√¨nh YOLOv8 ƒë√£ train."""
    try:
        return YOLO(model_path)
    except Exception as e:
        print(f"‚ùå L·ªñI T·∫¢I YOLO: {e}")
        return None


def detect_wheel_yolo(frame, yolo_model):
    """Ph√°t hi·ªán v√¥ lƒÉng b·∫±ng m√¥ h√¨nh YOLOv8 v√† tr·∫£ v·ªÅ (x, y, r)."""
    if yolo_model is None: return None
    results = yolo_model(frame, verbose=False, conf=0.5, classes=[0])

    for result in results:
        boxes = result.boxes
        if len(boxes) > 0:
            box = boxes[0].xyxy[0].cpu().numpy().astype(int)
            x_min, y_min, x_max, y_max = box

            x_w = (x_min + x_max) // 2
            y_w = (y_min + y_max) // 2
            r_w = int((x_max - x_min + y_max - y_min) / 4)

            return (x_w, y_w, r_w)

    return None


def get_mp_hands_instance():
    """T·∫°o instance MediaPipe Hands."""
    return mp_hands.Hands(static_image_mode=True, max_num_hands=2, min_detection_confidence=0.5)


def extract_features(image, hands_processor, wheel):
    """
    Tr√≠ch xu·∫•t 128 ƒë·∫∑c tr∆∞ng (t·ªïng) tay, bao g·ªìm c√°c ƒë·∫∑c tr∆∞ng t∆∞∆°ng ƒë·ªëi v√† g√≥c ƒë·ªô.
    Logic n√†y ph·∫£i kh·ªõp ho√†n to√†n v·ªõi h√†m extract_features trong file d·ª± ƒëo√°n.
    """
    if wheel is None: return None
    xw, yw, rw = wheel
    h, w, _ = image.shape
    feats_all = []

    rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    res = hands_processor.process(rgb)

    if not res.multi_hand_landmarks:
        return None

    for hand_landmarks in res.multi_hand_landmarks:
        feats = []
        normalized_coords = []

        # 1. Tr√≠ch xu·∫•t T·ªça ƒë·ªô chu·∫©n h√≥a (63 ƒë·∫∑c tr∆∞ng: 21 * x,y,z)
        for lm in hand_landmarks.landmark:
            feats.extend([lm.x, lm.y, lm.z])
            normalized_coords.append(np.array([lm.x, lm.y]))  # D√πng cho t√≠nh to√°n kho·∫£ng c√°ch

        # 2. ƒê·∫∑c tr∆∞ng Kho·∫£ng c√°ch ƒë·∫øn t√¢m v√¥ lƒÉng (1 ƒë·∫∑c tr∆∞ng)
        hx = hand_landmarks.landmark[0].x * w
        hy = hand_landmarks.landmark[0].y * h
        dist_to_center = np.sqrt((xw - hx) ** 2 + (yw - hy) ** 2)
        feats.append(dist_to_center / (rw + EPS))

        # --- TH√äM C√ÅC ƒê·∫∂C TR∆ØNG M·ªöI (D·∫•u hi·ªáu c·ªßa vi·ªác N·∫Øm) ---

        # a) ƒê·∫∑c tr∆∞ng v·ªã tr√≠ t∆∞∆°ng ƒë·ªëi c·ªßa c√°c ƒë·∫ßu ng√≥n tay so v·ªõi t√¢m v√¥ lƒÉng (10 ƒë·∫∑c tr∆∞ng)
        tip_indices = [4, 8, 12, 16, 20]

        for i in tip_indices:
            lm_tip = hand_landmarks.landmark[i]

            tip_x = lm_tip.x * w
            tip_y = lm_tip.y * h

            # Kho·∫£ng c√°ch t∆∞∆°ng ƒë·ªëi
            rel_dist = np.sqrt((xw - tip_x) ** 2 + (yw - tip_y) ** 2)
            feats.append(rel_dist / (rw + EPS))

            # G√≥c t∆∞∆°ng ƒë·ªëi
            angle = np.arctan2(tip_y - yw, tip_x - xw) / np.pi
            feats.append(angle)

        # b) ƒê·∫∑c tr∆∞ng Kho·∫£ng c√°ch gi·ªØa c√°c ng√≥n tay (10 ƒë·∫∑c tr∆∞ng)
        # N·∫Øm ch·∫∑t s·∫Ω l√†m c√°c kho·∫£ng c√°ch n√†y thay ƒë·ªïi
        pairs = [(5, 8), (9, 12), (13, 16), (17, 20), (0, 5)]
        for i, j in pairs:
            p_i = normalized_coords[i]
            p_j = normalized_coords[j]

            distance = np.linalg.norm(p_i - p_j)
            feats.append(distance)

        feats_all.extend(feats)

    # C·∫Øt ho·∫∑c th√™m 0.0 ƒë·ªÉ ƒë·∫£m b·∫£o ƒë√∫ng EXPECTED_FEATURES (128)
    if len(feats_all) < EXPECTED_FEATURES:
        feats_all.extend([0.0] * (EXPECTED_FEATURES - len(feats_all)))

    return np.array(feats_all[:EXPECTED_FEATURES], dtype=np.float32)


# ==========================================================
# H√ÄM C√ÇN B·∫∞NG D·ªÆ LI·ªÜU (UPSAMPLING)
# ==========================================================

def balance_data(X_list, Y_list, class_names):
    """C√¢n b·∫±ng d·ªØ li·ªáu b·∫±ng c√°ch Upsampling l·ªõp thi·ªÉu s·ªë."""

    # 1. Nh√≥m d·ªØ li·ªáu theo l·ªõp
    class_data = defaultdict(lambda: {'X': [], 'Y': []})
    for x, y in zip(X_list, Y_list):
        class_data[y]['X'].append(x)
        class_data[y]['Y'].append(y)

    # 2. T√¨m k√≠ch th∆∞·ªõc c·ªßa l·ªõp l·ªõn nh·∫•t
    max_size = 0
    for class_id in class_data:
        max_size = max(max_size, len(class_data[class_id]['X']))

    # 3. Th·ª±c hi·ªán Upsampling
    X_balanced = []
    Y_balanced = []

    print(f"\n--- C√¢n b·∫±ng d·ªØ li·ªáu (Upsampling) ---")

    for class_id in class_data:
        X_class = np.array(class_data[class_id]['X'])
        Y_class = np.array(class_data[class_id]['Y'])
        current_size = len(X_class)

        if current_size == 0:
            continue

        num_repeats = max_size // current_size
        remainder = max_size % current_size

        X_repeated = np.repeat(X_class, num_repeats, axis=0)
        Y_repeated = np.repeat(Y_class, num_repeats)

        if remainder > 0:
            # Ch·ªçn ng·∫´u nhi√™n c√°c m·∫´u ƒë·ªÉ th√™m v√†o ph·∫ßn d∆∞
            indices = np.random.choice(current_size, size=remainder, replace=False)
            X_repeated = np.concatenate([X_repeated, X_class[indices]])
            Y_repeated = np.concatenate([Y_repeated, Y_class[indices]])

        X_balanced.extend(X_repeated.tolist())
        Y_balanced.extend(Y_repeated.tolist())

        print(
            f"L·ªõp {class_names[class_id]} (ID {class_id}): Ban ƒë·∫ßu {current_size} m·∫´u -> Sau c√¢n b·∫±ng {len(X_repeated)} m·∫´u.")

    # 4. Chuy·ªÉn v·ªÅ Numpy Array v√† x√°o tr·ªôn (Shuffle)
    X_balanced = np.array(X_balanced)
    Y_balanced = np.array(Y_balanced)

    indices = np.arange(len(X_balanced))
    np.random.shuffle(indices)

    return X_balanced[indices], Y_balanced[indices]


# ==========================================================
# CH∆Ø∆†NG TR√åNH CH√çNH
# ==========================================================

def create_npz_data():
    all_features = []
    all_labels = []

    if not os.path.exists(DATA_DIR):
        print(f"‚ùå L·ªñI: Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c d·ªØ li·ªáu '{DATA_DIR}'.")
        return

    # T·∫£i model YOLO v√† t·∫°o map nh√£n
    yolo_model = load_yolo_wheel_model(YOLO_MODEL_PATH)
    if yolo_model is None: return

    # 1. T·∫°o label map v√† class names
    class_dirs = sorted([d for d in os.listdir(DATA_DIR) if os.path.isdir(os.path.join(DATA_DIR, d))])
    if not class_dirs:
        print(f"‚ùå L·ªñI: Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c con n√†o (v√≠ d·ª•: on_wheel, off_wheel) trong '{DATA_DIR}'.")
        return

    label_map = {name: i for i, name in enumerate(class_dirs)}
    class_names = {i: name for name, i in label_map.items()}  # Map ID -> Name

    hands_processor = get_mp_hands_instance()

    print(f"‚úÖ Model YOLO ƒë√£ t·∫£i. B·∫Øt ƒë·∫ßu tr√≠ch xu·∫•t ƒë·∫∑c tr∆∞ng ({EXPECTED_FEATURES} chi·ªÅu)...")
    print(f"B·∫£n ƒë·ªì nh√£n: {label_map}")

    # 2. V√≤ng l·∫∑p tr√≠ch xu·∫•t
    for label_name, label_id in label_map.items():
        class_path = os.path.join(DATA_DIR, label_name)

        for filename in os.listdir(class_path):
            if filename.endswith(('.jpg', '.jpeg', '.png')):
                file_path = os.path.join(class_path, filename)

                try:
                    img = np.array(Image.open(file_path).convert('RGB'))
                    img_bgr = cv2.cvtColor(img, cv2.COLOR_RGB2BGR)

                    wheel_coords = detect_wheel_yolo(img_bgr, yolo_model)

                    if wheel_coords is None: continue

                    # S·ª¨ D·ª§NG H√ÄM TR√çCH XU·∫§T C·∫¢I TI·∫æN 128 CHI·ªÄU
                    features = extract_features(img_bgr, hands_processor, wheel_coords)

                    if features is not None:
                        all_features.append(features)
                        all_labels.append(label_id)

                    # NOTE: X·ª≠ l√Ω tr∆∞·ªùng h·ª£p off_wheel kh√¥ng t√¨m th·∫•y tay
                    # Lu·∫≠t c·ª©ng n√†y c√≥ th·ªÉ g√¢y nhi·ªÖu, nh∆∞ng gi·ªØ l·∫°i theo logic c≈©
                    elif label_name.lower() == 'off_wheel':
                        # G√°n m·∫£ng 0.0 (128 ƒë·∫∑c tr∆∞ng) n·∫øu kh√¥ng t√¨m th·∫•y tay trong class off_wheel
                        zero_features = np.zeros(EXPECTED_FEATURES, dtype=np.float32)
                        all_features.append(zero_features)
                        all_labels.append(label_id)

                except Exception as e:
                    # print(f"  [L·ªñI] X·ª≠ l√Ω {filename} th·∫•t b·∫°i: {e}")
                    pass

    print("\n--- Ho√†n t·∫•t tr√≠ch xu·∫•t th√¥. B·∫Øt ƒë·∫ßu c√¢n b·∫±ng d·ªØ li·ªáu... ---")

    # 3. C√¢n b·∫±ng d·ªØ li·ªáu
    X_balanced, Y_balanced = balance_data(all_features, all_labels, class_names)

    # 4. L∆∞u tr·ªØ
    np.savez_compressed(OUTPUT_FILE, X=X_balanced, Y=Y_balanced, classes=list(label_map.keys()))

    print("\n" + "=" * 50)
    print(f"‚úÖ HO√ÄN T·∫§T L∆ØU TR·ªÆ D·ªÆ LI·ªÜU ƒê√É C√ÇN B·∫∞NG!")
    print(f"File ƒë·∫ßu ra: {OUTPUT_FILE}")
    print(f"T·ªïng s·ªë m·∫´u sau c√¢n b·∫±ng: {X_balanced.shape[0]}")
    print(f"K√≠ch th∆∞·ªõc ƒë·∫∑c tr∆∞ng: {X_balanced.shape[1]}")
    print("=" * 50)


if __name__ == "__main__":
    create_npz_data()
